; Constants
;----------

lcd_command     equ $00             ; LCD command I/O port
lcd_data        equ $01             ; LCD data I/O port
kb_high_byte    equ $20             ; I/O port for high byte of PS/2 serial register
kb_low_byte     equ $40             ; I/O port for low byte of PS/2 serial register
ram_start       equ $2000           ; The lowest address in the RAM
ram_top         equ $7fff           ; The highest address in the RAM

; Variables and flags
;--------------------
counter         equ $7000           ; 2 bytes

org $0                              ; Z80 starts reading here so we send it to the right location
   ^ ***ERROR*** 'org' in column 1: option '--reqcolon' may help
    jp setup


org $0038                           ; Interrupt handler is always at address $0038 in interrupt mode 1
int:
    ; Interrupt setup
    di                              ; Disable interrupts
    ex af,af'                       ; Save register states
    exx                             ; Save register states

    ld de,$0001                 ; Position cursor on second line (x,y: 0,1)
    call lcd_goto

    ld hl,(counter)             ; Load value at address $3000 into HL   HL > 1
    inc hl                      ; Increment value in HL                 HL > 2
    ld (counter),hl             ; Load value in HL into address $3000   HL > 2

    call DispHL                 ; Display HL

    ; Interrupt logic
    ; ld hl,counter
    ; inc (hl)


    ; jp nz,exit_interrupt
    ; ld hl,counter+1
    ; inc (hl)

    ; ld hl,(counter)
	; call DispHL

    exit_interrupt:
        ; Interrupt setdown
        exx                             ; Restore register states
        ex af,af'                       ; Restore register states
        ei                              ; Enable interrupts
        ; ret                             ; Return back to main program
        ret

org $0100
setup:
    ld sp,ram_top                   ; Initialize the stack pointer at the top of RAM

    ; ld hl,counter+1
    ; ld (hl),$00

    ; ld hl,(counter)
	; call DispHL

    im 1                            ; Set interrupt mode 1 (go to $0038 on interrupt)
    ei                              ; Enable interrupts
    
    call lcd_initialise             ; Setup LCD display
    
    ld hl,welcome_message           ; Display welcome message
    call lcd_send_asciiz
    
    ld de,$0001                     ; Position cursor on second line (x,y: 0,1)
    call lcd_goto

    ld hl,$0000
    ld (counter),hl
    ld hl,(counter)

    call DispHL

main_loop:
    halt
    jp main_loop

delay:
    LD BC, 200h            ;Loads BC with hex 100
    delay_outer:
        LD DE, 200h            ;Loads DE with hex 100
        delay_inner:
            DEC DE                  ;Decrements DE
            LD A, D                 ;Copies D into A
            OR E                    ;Bitwise OR of E with A (now, A = D | E)
            JP NZ, delay_inner            ;Jumps back to Inner: label if A is not zero
            DEC BC                  ;Decrements BC
            LD A, B                 ;Copies B into A
            OR C                    ;Bitwise OR of C with A (now, A = B | C)
            JP NZ, delay_outer            ;Jumps back to Outer: label if A is not zero
            RET                     ;Return from call to this subroutine

; Data
;----------
welcome_message:
    db "HEX-80 READY",0

; Libraries
;----------
include "lib/LCDLib.asm"
; include "lib/PS2Lib.asm"

align 8192                          ; Pad remaining ROM space with $ff


total time: 0.0007 sec.
1 error
